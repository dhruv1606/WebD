in bash : 

npm init -y
npm i express mongoose ejs

in vscode for express : 

const express = require('express');
const app = express();
app.listen(3000, () => {
	console.log('Server on port 3000')
})

app.get('/', (req, res) => {
	res.send('Hello from YelpCamp');
})

make a views directory in folder
make home.ejs in views

in vscode : 

const path = require('path');
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

changed in app.get: 

app.get('/', (req, res) => {
	res.redirect('home');
})

for mongoose setup : 

make folder models
make campground.js in models
in here :

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const CampgroundSchema = new Schema({
	title : String,
	price : String,
	description : String,
	location : String
});

module.exports = mongoose.model('Campground', CampgroundSchema);

in app.js : 

mongoose.connect('mongodb://localhost:27017/yelp-camp', {
	useCreateIndex : true,
	useUnifiedTopology : true
});

const db = mongoose.connection;
db.on("error", console.error.bind(console, "connection error:"));
db.once("once", () => {
	console.log("Database connected");
})

const campground = require('./models/campground.js');

app.get('/createcampground', async (req, res) => {
	const camp = new campground({title: 'My backyard', description: 'Cheap Camping'});
	await camp.save();
	res.send(camp);
});


For setting up the data in the database : 
make a seeds folder and in that 
- make a file seedHelpers in which 
 -- module.exports.descriptors = ['Forest', 'Ancient', ...]
 -- module.exports.places = ['Flats', 'Village', 'Canyon', ...]

make another file cities.js in which : 
--- module.exports = [
    {
        city: "New York",
        growth_from_2000_to_2013: "4.8%",
        latitude: 40.7127837,
        longitude: -74.0059413,
        population: "8405837",
        rank: "1",
        state: "New York",
    },

make a file in this seeds folder called index.js and in this : 
const mongoose = require('mongoose');
const cities = require(./cities);
const { places, desctiptors } = require('./seedHelpers.js');
const Campground = require('../models/campground');

mongoose.connect('mongodb://localhost:27017/yelp-camp', {
	useNewUrlParser: true, 
	useUnifiedTopology: true
});

const db = mongoose.connection;
db.on("error", console.error.bind(console, "connection error"));
db.once("open", () => {
	console.log("Database connected");
});

this was the setting up of the basic data of the database
then  : 


const sample = array => array[Math.floor(Math.random() * array.length)];

const seedDB = async() => {
	await Campground.deleteMany({});
	for(let i=0; i<50; i++) {
		const random100 = Math.floor(Math.random() * 1000);
		const camp = new Campground({
			location: `${cities[random1000].city}, ${cities[random].state}`,
			title: `${sample(descriptors)} ${sample(places)}`
		})
		await camp.save();
	}
}

seedDB().then(() => {
	mongoose.connection.close();
})


delete app.get(createcampgorund)
make : 
app.get('campgrounds', async() => {
	const campgrounds = await Campground.find({});
	res.render('campgrounds/index', {campgrounds});
})

make a folder in views named campgrounds and in that make a file index.ejs
in that : 
<h1>Campgrounds</h1>
<ul>
<% for (let campground of campgrounds) { %>
<li><%= campgrounds.title %></li>
<% } %>
</ul>

for editing the values : 
app.get('/campgrounds/:id/edit', async(req, res) => {
  const campground = await Campground.findById(req.params.id);
  res.render('campgrounds/edit', { campground })
})

make edit form same as new and put values in input tags

install method-override (npm i method-override)

const methodOverride = require('method-override');
app.use(methodOverride('_method'));

in app.js : 

app.put('/campgrounds/:id', asyn(req, res) {
	const { id } = req.params;	
	Campground.findByIdAndUpdate(id, { ...req.body.campground });
	res.redirect('/campgrounds/${campground._id}');
})

in the edit.ejs file : 
make the form action to "/camogrounds/<%=camground._id%?_method=PUT>"
also add value attribute and set the initial values of the fields


for deleting : 
in app.js : 

app.delete('/campgrounds/:id', async(req, res) {
	const { id } = req.params;
	await CAmpground.findByIdAndDelete(id);
	res.redirect('/campgrounds');
})

for show.ejs in delete form make method to delete using method-override